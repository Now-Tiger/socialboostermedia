# Use the official Python 3.12 slim image as the base image.
# The slim variant is smaller and more suitable for production.
FROM python:3.12-slim

# Set the working directory inside the container.
# WORKDIR /app
WORKDIR /usr/src/sbm_backend

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

RUN apt-get update && apt-get install -y netcat


# Upgrade pip and install uv, the fast, Rust-based Python package installer.
RUN pip install --upgrade pip
RUN pip install uv

# Copy only the dependency file first to leverage Docker's layer caching.
# If this file doesn't change, Docker won't re-run the uv sync step.
COPY ./pyproject.toml .

# Install the project dependencies using uv.
# The sync command ensures that the dependencies match the pyproject.toml file.
RUN uv sync

# Copy entrypoint.sh
COPY ./entrypoint.sh .
RUN sed -i 's/\r$//g' /usr/src/sbm_backend/entrypoint.sh

# Make it executable
RUN chmod +x /usr/src/sbm_backend/entrypoint.sh

# Copy the rest of your Django project files into the container.
COPY . .

ENTRYPOINT [ "/usr/src/sbm_backend/entrypoint.sh" ]

# Expose port 8000, as Django will run on this port.
# EXPOSE 8000

# Run the Django migrations. This is a crucial step for Django applications.
# If your project doesn't use a database, you can remove this line.
# RUN uv run manage.py migrate

# Define the command to run the Django development server.
# The 0.0.0.0 host is essential to make the server accessible from outside the container.
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
